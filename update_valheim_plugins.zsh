#!/bin/zsh

# This script updates Valheim plugins by fetching the latest versions defined in a JSON file.
# It checks for required tools and ensures they are installed before proceeding.

target_dir="$HOME/Library/Application Support/Steam/steamapps/common/Valheim"
repo_root="github.com/BepInEx/BepInEx"
asset_regex_pattern="BepInEx_macos_x64_.+\\\\.zip"
thunderstore_download_url="https://cdn.thunderstore.io/live/repository/packages/"
mod_dir="$HOME/Library/Application Support/Steam/steamapps/common/Valheim/BepInEx/plugins"
mod_list_file="valheim-thunderstore-modfile-list"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  -h, --help          Show this help message and exit"
      echo "  -m, --modfile <file> Specify a custom mod file list (default: valheim-thunderstore-modfile-list)"
      echo "  -r, --reinstall  Force reinstallation of all mods"
      exit 0
      ;;
    -m|--modfile)
      if [[ -n $2 && ! $2 =~ ^- ]]; then
        mod_list_file="$2"
        shift 2
      else
        echo "Error: --modfile requires a file argument."
        exit 1
      fi
      ;;
    -r|--reinstall)
      force_reinstall=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use -h or --help for usage information."
      exit 1
      ;;
  esac
done

required_tools=(jq curl gh unzip)
missing_tools=()
for tool in $required_tools; do
  if ! which -s $tool > /dev/null; then
    missing_tools+=($tool)
  fi
done
if (( ${#missing_tools[@]} > 0 )); then
  echo "The following required tools are missing: ${missing_tools[@]}"
  echo "Please install them and try again."
  exit 1
fi

latest_release_info=$(gh release view --repo $repo_root --json tagName,assets | jq '{tagName:.tagName,asset:(.assets.[] | (.name | match("'$asset_regex_pattern'").string))}')

if [[ -z $latest_release_info ]]; then
  echo "No matching release found."
  exit 1
fi

# Download the latest release asset
latest_release_asset=$(echo $latest_release_info | jq -r '.asset')
if [[ -z $latest_release_asset ]]; then
  echo "No asset matching the pattern '$asset_regex_pattern' found in the latest release."
  exit 1
fi

latest_release_tag=$(echo $latest_release_info | jq -r '.tagName')
if [[ -z $latest_release_tag ]]; then
  echo "No tag found for the latest release."
  exit 1
fi

target_file="$target_dir/$latest_release_asset"
if [[ -f $target_file ]]; then
  echo "The file '$target_file' already exists. Skipping download."
else
  echo "Downloading asset: $latest_release_asset from release: $latest_release_tag"
  gh release download $latest_release_tag --repo $repo_root --pattern "$latest_release_asset" --skip-existing --dir "$target_dir"
  if [[ $? -ne 0 ]]; then
    echo "Failed to download the asset."
    exit 1
  fi
  echo "Download completed successfully."
fi

echo "Extracting the downloaded asset..."
unzip -o "$target_dir/$latest_release_asset" -d "$target_dir"
if [[ $? -ne 0 ]]; then
  echo "Failed to extract the asset."
  exit 1
fi
echo "Extraction completed successfully."

# Ensure the run_bepinex.sh script is executable
run_bepinex_script="$HOME/Library/Application Support/Steam/steamapps/common/Valheim/run_bepinex.sh"
if [ -f "$run_bepinex_script" ]; then
    chmod +x "$run_bepinex_script"
else
    echo "run_bepinex.sh script not found: $run_bepinex_script"
    exit 1
fi

#######
# Build a pseudo-application to run Valheim with BepInEx.

pseudo_app_root="$HOME/Applications/Valheim (Modded).app"
if [ ! -d "$pseudo_app_root" ]; then
    mkdir -p "$pseudo_app_root/Contents/MacOS"
    mkdir -p "$pseudo_app_root/Contents/Resources"
fi

if [ -f "$HOME/Library/Application Support/Steam/steamapps/common/Valheim/Valheim.app/Contents/Resources/PlayerIcon.icns" ]; then
    cp "$HOME/Library/Application Support/Steam/steamapps/common/Valheim/Valheim.app/Contents/Resources/PlayerIcon.icns" "$pseudo_app_root/Contents/Resources/shortcut.icns"
elif [ -f "$HOME/Applications/Valheim.app/Contents/Resources/shortcut.icns" ]; then
    cp "$HOME/Applications/Valheim.app/Contents/Resources/shortcut.icns" "$pseudo_app_root/Contents/Resources/"
else
    echo "No icon found for Valheim.app, using default."
fi

# Create a run script for the pseudo-application
run_script="$pseudo_app_root/Contents/MacOS/run_valheim.sh"
cat << 'EOF' > "$run_script"
#!/bin/bash
# autogenerated script to run Valheim with BepInEx

script_root="$HOME/Library/Application Support/Steam/steamapps/common/Valheim"
cd "$script_root" || exit 1

# Check if the config file exists yet
if [ ! -f "$script_root/BepInEx/config/BepInEx.cfg" ]; then
    echo "BepInEx configuration file not found. The game may need to be restarted through this script after the first run."
    osascript -e 'display dialog "BepInEx configuration file not found. The game may need to be restarted through this script after the first run." buttons {"OK"} default button "OK"'
else
    echo "BepInEx configuration file found."
    sed -i.bu 's/Type = Application/Type = GameObject/' "$script_root/BepInEx/config/BepInEx.cfg"
fi

wrapped_script_path="$script_root/run_bepinex.sh"
if [ -f "$wrapped_script_path" ]; then
    exec "$wrapped_script_path" "valheim.app" -console "$@"
else
    echo "Wrapped script not found: $wrapped_script_path"
    exit 1
fi
EOF
chmod +x "$run_script"

# Create the Info.plist for the pseudo-application
info_plist="$pseudo_app_root/Contents/Info.plist"
cat << EOF > "$info_plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>CFBundleExecutable</key>
    <string>run_valheim.sh</string>
    <key>CFBundleIconFile</key>
    <string>shortcut.icns</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>1.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleSignature</key>
    <string>????</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
  </dict>
</plist>
EOF
chmod +x "$info_plist"

function finish_mod_installation {
    local mod_file="$1"
    local mod_dir="$2"
    local delete_folders=$3
    mod_name_split=("${(s/-/)mod_file}")
    mod_name="${mod_name_split[2]}"
    if [[ ! -d "$mod_dir/$mod_name" ]]; then
        echo "Creating directory for mod: $mod_name"
        mkdir -p "$mod_dir/$mod_name"
    elif [[ $delete_folders == true ]]; then
        echo "Removing existing directory for mod: $mod_name"
        rm -rf "$mod_dir/$mod_name"
        mkdir -p "$mod_dir/$mod_name"
    else
        echo "Directory for mod $mod_name already exists. The configuration may need to be updated. If you run into issues, try removing the directory and rerunning this script: $mod_dir/$mod_name"
    fi
    unzip -o "$mod_dir/$mod_file" -d "$mod_dir/$mod_name"
    if [[ $? -ne 0 ]]; then
        echo "Failed to extract mod: $mod_file"
        continue
    fi
    echo "Mod installed successfully: $mod_file"
}

# Update the installed mods
if [ ! -f "$mod_list_file" ]; then
    echo "$mod_list_file not found, creating it. Add your mod zip files in the form of '<author>-<name>-<version>.zip' as listed on Thunderstore.io to this file and rerun."
    touch "$mod_list_file"
else
    echo "Updating installed mods from $mod_list_file..."
    while IFS= read -r mod_file; do
        if [[ -z $mod_file || $mod_file =~ ^# ]]; then
            continue  # Skip empty lines and comments
        fi
        if [[ ! -f "$mod_dir/$mod_file" ]]; then
            echo "Installing mod: $mod_file"
            echo "${thunderstore_download_url}${mod_file}"
            curl --progress-bar -L --max-redirs 3 -s "${thunderstore_download_url}${mod_file}" -o "$mod_dir/$mod_file"
            if [[ $? -ne 0 ]]; then
                echo "Failed to download mod: $mod_file"
                continue
            fi
            finish_mod_installation "$mod_file" "$mod_dir" false
        elif [[ -n $force_reinstall ]]; then
            echo "Reinstalling mod: $mod_file"
            finish_mod_installation "$mod_file" "$mod_dir" true
        else
            echo "Mod file up to date: $mod_file"
        fi

    done < "$mod_list_file"
    echo "Installed mods updated successfully."
fi